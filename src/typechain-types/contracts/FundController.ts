/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export type ProposalStruct = {
  id: BigNumberish;
  proposer: AddressLike;
  assetsToTrade: AddressLike[];
  assetsToReceive: AddressLike[];
  amountsIn: BigNumberish[];
  minAmountsToReceive: BigNumberish[];
  approvalTimelockEnd: BigNumberish;
};

export type ProposalStructOutput = [
  id: bigint,
  proposer: string,
  assetsToTrade: string[],
  assetsToReceive: string[],
  amountsIn: bigint[],
  minAmountsToReceive: bigint[],
  approvalTimelockEnd: bigint
] & {
  id: bigint;
  proposer: string;
  assetsToTrade: string[];
  assetsToReceive: string[];
  amountsIn: bigint[];
  minAmountsToReceive: bigint[];
  approvalTimelockEnd: bigint;
};

export interface FundControllerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "acceptProposal"
      | "addAssetToFund"
      | "checkIsSuccessfulProposer"
      | "createProposal"
      | "getActiveProposals"
      | "getProposalById"
      | "initialize"
      | "intentToAccept"
      | "issueUsingStableCoin"
      | "owner"
      | "realizeFundFees"
      | "redeemAssets"
      | "renounceOwnership"
      | "s_activeProposalIds"
      | "s_approverPercentageReward"
      | "s_approvers"
      | "s_epochDuration"
      | "s_epochExpirationTime"
      | "s_initialFundTokenValue"
      | "s_largestFeePercentage"
      | "s_latestProposalId"
      | "s_longestEpochDuration"
      | "s_newFeeTimelockDuration"
      | "s_proposalAcceptTimelockDuration"
      | "s_proposals"
      | "s_proposerPercentageReward"
      | "s_shortestEpochDuration"
      | "s_successfulProposers"
      | "s_totalAcceptedProposals"
      | "setApproversList"
      | "setEpochDuration"
      | "setFeePercentagesWad"
      | "setProposalAcceptTimelockDuration"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;

  encodeFunctionData(
    functionFragment: "acceptProposal",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addAssetToFund",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "checkIsSuccessfulProposer",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createProposal",
    values: [AddressLike[], AddressLike[], BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getActiveProposals",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getProposalById",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "intentToAccept",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "issueUsingStableCoin",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "realizeFundFees",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "redeemAssets",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "s_activeProposalIds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "s_approverPercentageReward",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "s_approvers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "s_epochDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "s_epochExpirationTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "s_initialFundTokenValue",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "s_largestFeePercentage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "s_latestProposalId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "s_longestEpochDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "s_newFeeTimelockDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "s_proposalAcceptTimelockDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "s_proposals",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "s_proposerPercentageReward",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "s_shortestEpochDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "s_successfulProposers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "s_totalAcceptedProposals",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setApproversList",
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setEpochDuration",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeePercentagesWad",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setProposalAcceptTimelockDuration",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addAssetToFund",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkIsSuccessfulProposer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getActiveProposals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProposalById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "intentToAccept",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "issueUsingStableCoin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "realizeFundFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "s_activeProposalIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "s_approverPercentageReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "s_approvers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "s_epochDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "s_epochExpirationTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "s_initialFundTokenValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "s_largestFeePercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "s_latestProposalId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "s_longestEpochDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "s_newFeeTimelockDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "s_proposalAcceptTimelockDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "s_proposals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "s_proposerPercentageReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "s_shortestEpochDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "s_successfulProposers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "s_totalAcceptedProposals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApproversList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEpochDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeePercentagesWad",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProposalAcceptTimelockDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface FundController extends BaseContract {
  connect(runner?: ContractRunner | null): FundController;
  waitForDeployment(): Promise<this>;

  interface: FundControllerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  acceptProposal: TypedContractMethod<
    [proposalIdToAccept: BigNumberish],
    [bigint[]],
    "nonpayable"
  >;

  addAssetToFund: TypedContractMethod<
    [_assetAddress: AddressLike, _aggregatorAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  checkIsSuccessfulProposer: TypedContractMethod<
    [_proposer: AddressLike],
    [bigint],
    "view"
  >;

  createProposal: TypedContractMethod<
    [
      _assetsToTrade: AddressLike[],
      _assetsToReceive: AddressLike[],
      _amountsIn: BigNumberish[],
      _minAmountsToReceive: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;

  getActiveProposals: TypedContractMethod<[], [ProposalStructOutput[]], "view">;

  getProposalById: TypedContractMethod<
    [id: BigNumberish],
    [ProposalStructOutput],
    "view"
  >;

  initialize: TypedContractMethod<
    [_fundTokenAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  intentToAccept: TypedContractMethod<
    [proposalIdToAccept: BigNumberish],
    [void],
    "nonpayable"
  >;

  issueUsingStableCoin: TypedContractMethod<
    [_rawUSDCContributed: BigNumberish],
    [void],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  realizeFundFees: TypedContractMethod<[], [void], "nonpayable">;

  redeemAssets: TypedContractMethod<
    [_rawFTokenToRedeem: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  s_activeProposalIds: TypedContractMethod<
    [arg0: BigNumberish],
    [bigint],
    "view"
  >;

  s_approverPercentageReward: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint] & {
        feePercentage: bigint;
        newFeePercentage: bigint;
        newFeeTimeLockEnd: bigint;
      }
    ],
    "view"
  >;

  s_approvers: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  s_epochDuration: TypedContractMethod<[], [bigint], "view">;

  s_epochExpirationTime: TypedContractMethod<[], [bigint], "view">;

  s_initialFundTokenValue: TypedContractMethod<[], [bigint], "view">;

  s_largestFeePercentage: TypedContractMethod<[], [bigint], "view">;

  s_latestProposalId: TypedContractMethod<[], [bigint], "view">;

  s_longestEpochDuration: TypedContractMethod<[], [bigint], "view">;

  s_newFeeTimelockDuration: TypedContractMethod<[], [bigint], "view">;

  s_proposalAcceptTimelockDuration: TypedContractMethod<[], [bigint], "view">;

  s_proposals: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, bigint] & {
        id: bigint;
        proposer: string;
        approvalTimelockEnd: bigint;
      }
    ],
    "view"
  >;

  s_proposerPercentageReward: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint] & {
        feePercentage: bigint;
        newFeePercentage: bigint;
        newFeeTimeLockEnd: bigint;
      }
    ],
    "view"
  >;

  s_shortestEpochDuration: TypedContractMethod<[], [bigint], "view">;

  s_successfulProposers: TypedContractMethod<
    [arg0: BigNumberish],
    [string],
    "view"
  >;

  s_totalAcceptedProposals: TypedContractMethod<[], [bigint], "view">;

  setApproversList: TypedContractMethod<
    [_newApprovers: AddressLike[]],
    [void],
    "nonpayable"
  >;

  setEpochDuration: TypedContractMethod<
    [_epochDuration: BigNumberish],
    [void],
    "nonpayable"
  >;

  setFeePercentagesWad: TypedContractMethod<
    [_proposerPercentage: BigNumberish, _approverPercentage: BigNumberish],
    [void],
    "nonpayable"
  >;

  setProposalAcceptTimelockDuration: TypedContractMethod<
    [_proposalAcceptTimelockDuration: BigNumberish],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "acceptProposal"
  ): TypedContractMethod<
    [proposalIdToAccept: BigNumberish],
    [bigint[]],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "addAssetToFund"
  ): TypedContractMethod<
    [_assetAddress: AddressLike, _aggregatorAddress: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "checkIsSuccessfulProposer"
  ): TypedContractMethod<[_proposer: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "createProposal"
  ): TypedContractMethod<
    [
      _assetsToTrade: AddressLike[],
      _assetsToReceive: AddressLike[],
      _amountsIn: BigNumberish[],
      _minAmountsToReceive: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getActiveProposals"
  ): TypedContractMethod<[], [ProposalStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "getProposalById"
  ): TypedContractMethod<[id: BigNumberish], [ProposalStructOutput], "view">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [_fundTokenAddress: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "intentToAccept"
  ): TypedContractMethod<
    [proposalIdToAccept: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "issueUsingStableCoin"
  ): TypedContractMethod<
    [_rawUSDCContributed: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "realizeFundFees"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "redeemAssets"
  ): TypedContractMethod<
    [_rawFTokenToRedeem: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "s_activeProposalIds"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "s_approverPercentageReward"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint] & {
        feePercentage: bigint;
        newFeePercentage: bigint;
        newFeeTimeLockEnd: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "s_approvers"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "s_epochDuration"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "s_epochExpirationTime"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "s_initialFundTokenValue"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "s_largestFeePercentage"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "s_latestProposalId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "s_longestEpochDuration"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "s_newFeeTimelockDuration"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "s_proposalAcceptTimelockDuration"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "s_proposals"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, bigint] & {
        id: bigint;
        proposer: string;
        approvalTimelockEnd: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "s_proposerPercentageReward"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint] & {
        feePercentage: bigint;
        newFeePercentage: bigint;
        newFeeTimeLockEnd: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "s_shortestEpochDuration"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "s_successfulProposers"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "s_totalAcceptedProposals"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "setApproversList"
  ): TypedContractMethod<[_newApprovers: AddressLike[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setEpochDuration"
  ): TypedContractMethod<[_epochDuration: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setFeePercentagesWad"
  ): TypedContractMethod<
    [_proposerPercentage: BigNumberish, _approverPercentage: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setProposalAcceptTimelockDuration"
  ): TypedContractMethod<
    [_proposalAcceptTimelockDuration: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;

  filters: {
    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
  };
}
