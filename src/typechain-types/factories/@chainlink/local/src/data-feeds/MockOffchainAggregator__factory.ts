/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  BigNumberish,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../../../../common";
import type {
  MockOffchainAggregator,
  MockOffchainAggregatorInterface,
} from "../../../../../@chainlink/local/src/data-feeds/MockOffchainAggregator";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint8",
        name: "_decimals",
        type: "uint8",
      },
      {
        internalType: "int256",
        name: "_initialAnswer",
        type: "int256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "getAnswer",
    outputs: [
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint80",
        name: "_roundId",
        type: "uint80",
      },
    ],
    name: "getRoundData",
    outputs: [
      {
        internalType: "uint80",
        name: "roundId",
        type: "uint80",
      },
      {
        internalType: "int256",
        name: "answer",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "startedAt",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "updatedAt",
        type: "uint256",
      },
      {
        internalType: "uint80",
        name: "answeredInRound",
        type: "uint80",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "getTimestamp",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "latestAnswer",
    outputs: [
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "latestRound",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "latestRoundData",
    outputs: [
      {
        internalType: "uint80",
        name: "roundId",
        type: "uint80",
      },
      {
        internalType: "int256",
        name: "answer",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "startedAt",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "updatedAt",
        type: "uint256",
      },
      {
        internalType: "uint80",
        name: "answeredInRound",
        type: "uint80",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "latestTimestamp",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "maxAnswer",
    outputs: [
      {
        internalType: "int192",
        name: "",
        type: "int192",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "minAnswer",
    outputs: [
      {
        internalType: "int192",
        name: "",
        type: "int192",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int256",
        name: "_answer",
        type: "int256",
      },
    ],
    name: "updateAnswer",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int192",
        name: "_minAnswer",
        type: "int192",
      },
      {
        internalType: "int192",
        name: "_maxAnswer",
        type: "int192",
      },
    ],
    name: "updateMinAndMaxAnswers",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint80",
        name: "_roundId",
        type: "uint80",
      },
      {
        internalType: "int256",
        name: "_answer",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "_timestamp",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_startedAt",
        type: "uint256",
      },
    ],
    name: "updateRoundData",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50604051610e87380380610e87833981810160405281019061003291906101fc565b816000806101000a81548160ff021916908360ff16021790555061005b8161011160201b60201c565b6001600460006101000a81548177ffffffffffffffffffffffffffffffffffffffffffffffff021916908360170b77ffffffffffffffffffffffffffffffffffffffffffffffff16021790555075ffffffffffffffffffffffffffffffffffffffffffff600560006101000a81548177ffffffffffffffffffffffffffffffffffffffffffffffff021916908360170b77ffffffffffffffffffffffffffffffffffffffffffffffff16021790555050506102bd565b80600181905550426002819055506003600081548092919061013290610275565b919050555080600660006003548152602001908152602001600020819055504260076000600354815260200190815260200160002081905550426008600060035481526020019081526020016000208190555050565b600080fd5b600060ff82169050919050565b6101a38161018d565b81146101ae57600080fd5b50565b6000815190506101c08161019a565b92915050565b6000819050919050565b6101d9816101c6565b81146101e457600080fd5b50565b6000815190506101f6816101d0565b92915050565b6000806040838503121561021357610212610188565b5b6000610221858286016101b1565b9250506020610232858286016101e7565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000819050919050565b60006102808261026b565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036102b2576102b161023c565b5b600182019050919050565b610bbb806102cc6000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c80638205bf6a1161008c578063a87a20ce11610066578063a87a20ce146101f4578063b5ab58dc14610210578063b633620c14610240578063feaf968c14610270576100cf565b80638205bf6a1461018657806384cf7519146101a45780639a6fc8f5146101c0576100cf565b806322adbc78146100d4578063313ce567146100f25780634aa2011f1461011057806350d25bcd1461012c578063668a0f021461014a57806370da2f6714610168575b600080fd5b6100dc610292565b6040516100e9919061067e565b60405180910390f35b6100fa6102a5565b60405161010791906106b5565b60405180910390f35b61012a60048036038101906101259190610783565b6102b6565b005b61013461032b565b60405161014191906107f9565b60405180910390f35b610152610331565b60405161015f9190610823565b60405180910390f35b610170610337565b60405161017d919061067e565b60405180910390f35b61018e61034a565b60405161019b9190610823565b60405180910390f35b6101be60048036038101906101b9919061086a565b610350565b005b6101da60048036038101906101d591906108aa565b6104dd565b6040516101eb9594939291906108e6565b60405180910390f35b61020e60048036038101906102099190610939565b61055a565b005b61022a60048036038101906102259190610966565b6105d1565b60405161023791906107f9565b60405180910390f35b61025a60048036038101906102559190610966565b6105e9565b6040516102679190610823565b60405180910390f35b610278610601565b6040516102899594939291906108e6565b60405180910390f35b600460009054906101000a900460170b81565b60008054906101000a900460ff1681565b8369ffffffffffffffffffff16600381905550826001819055508160028190555082600660006003548152602001908152602001600020819055508160076000600354815260200190815260200160002081905550806008600060035481526020019081526020016000208190555050505050565b60015481565b60035481565b600560009054906101000a900460170b81565b60025481565b8060170b8260170b12610398576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161038f90610a16565b60405180910390fd5b600160170b8260170b12156103e2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103d990610a82565b60405180910390fd5b75ffffffffffffffffffffffffffffffffffffffffffff60170b8160170b1315610441576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161043890610aee565b60405180910390fd5b81600460006101000a81548177ffffffffffffffffffffffffffffffffffffffffffffffff021916908360170b77ffffffffffffffffffffffffffffffffffffffffffffffff16021790555080600560006101000a81548177ffffffffffffffffffffffffffffffffffffffffffffffff021916908360170b77ffffffffffffffffffffffffffffffffffffffffffffffff1602179055505050565b600080600080600085600660008869ffffffffffffffffffff16815260200190815260200160002054600860008969ffffffffffffffffffff16815260200190815260200160002054600760008a69ffffffffffffffffffff16815260200190815260200160002054899450945094509450945091939590929450565b80600181905550426002819055506003600081548092919061057b90610b3d565b919050555080600660006003548152602001908152602001600020819055504260076000600354815260200190815260200160002081905550426008600060035481526020019081526020016000208190555050565b60066020528060005260406000206000915090505481565b60076020528060005260406000206000915090505481565b6000806000806000600354600660006003548152602001908152602001600020546008600060035481526020019081526020016000205460076000600354815260200190815260200160002054600354945094509450945094509091929394565b60008160170b9050919050565b61067881610662565b82525050565b6000602082019050610693600083018461066f565b92915050565b600060ff82169050919050565b6106af81610699565b82525050565b60006020820190506106ca60008301846106a6565b92915050565b600080fd5b600069ffffffffffffffffffff82169050919050565b6106f4816106d5565b81146106ff57600080fd5b50565b600081359050610711816106eb565b92915050565b6000819050919050565b61072a81610717565b811461073557600080fd5b50565b60008135905061074781610721565b92915050565b6000819050919050565b6107608161074d565b811461076b57600080fd5b50565b60008135905061077d81610757565b92915050565b6000806000806080858703121561079d5761079c6106d0565b5b60006107ab87828801610702565b94505060206107bc87828801610738565b93505060406107cd8782880161076e565b92505060606107de8782880161076e565b91505092959194509250565b6107f381610717565b82525050565b600060208201905061080e60008301846107ea565b92915050565b61081d8161074d565b82525050565b60006020820190506108386000830184610814565b92915050565b61084781610662565b811461085257600080fd5b50565b6000813590506108648161083e565b92915050565b60008060408385031215610881576108806106d0565b5b600061088f85828601610855565b92505060206108a085828601610855565b9150509250929050565b6000602082840312156108c0576108bf6106d0565b5b60006108ce84828501610702565b91505092915050565b6108e0816106d5565b82525050565b600060a0820190506108fb60008301886108d7565b61090860208301876107ea565b6109156040830186610814565b6109226060830185610814565b61092f60808301846108d7565b9695505050505050565b60006020828403121561094f5761094e6106d0565b5b600061095d84828501610738565b91505092915050565b60006020828403121561097c5761097b6106d0565b5b600061098a8482850161076e565b91505092915050565b600082825260208201905092915050565b7f6d696e416e73776572206d757374206265206c657373207468616e206d61784160008201527f6e73776572000000000000000000000000000000000000000000000000000000602082015250565b6000610a00602583610993565b9150610a0b826109a4565b604082019050919050565b60006020820190508181036000830152610a2f816109f3565b9050919050565b7f6d696e416e7377657220697320746f6f206c6f77000000000000000000000000600082015250565b6000610a6c601483610993565b9150610a7782610a36565b602082019050919050565b60006020820190508181036000830152610a9b81610a5f565b9050919050565b7f6d6178416e7377657220697320746f6f20686967680000000000000000000000600082015250565b6000610ad8601583610993565b9150610ae382610aa2565b602082019050919050565b60006020820190508181036000830152610b0781610acb565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610b488261074d565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610b7a57610b79610b0e565b5b60018201905091905056fea26469706673582212208de8d4ea804ea0dd23a32a56d3ef4cb66558733945ec19b6c904cde03ec6a05664736f6c634300081c0033";

type MockOffchainAggregatorConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockOffchainAggregatorConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockOffchainAggregator__factory extends ContractFactory {
  constructor(...args: MockOffchainAggregatorConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    _decimals: BigNumberish,
    _initialAnswer: BigNumberish,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(
      _decimals,
      _initialAnswer,
      overrides || {}
    );
  }
  override deploy(
    _decimals: BigNumberish,
    _initialAnswer: BigNumberish,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(_decimals, _initialAnswer, overrides || {}) as Promise<
      MockOffchainAggregator & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(
    runner: ContractRunner | null
  ): MockOffchainAggregator__factory {
    return super.connect(runner) as MockOffchainAggregator__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockOffchainAggregatorInterface {
    return new Interface(_abi) as MockOffchainAggregatorInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): MockOffchainAggregator {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as MockOffchainAggregator;
  }
}
